
// This file is part of the LITIV framework; visit the original repository at
// https://github.com/plstcharles/litiv for more information.
//
// Copyright 2015 Pierre-Luc St-Charles; pierre-luc.st-charles<at>polymtl.ca
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// NOTE:
// CMake parses this file and automatically fills in the missing values;
// you should never modify it directly via "defines.hpp", but rather
// via "defines.hpp.in". Besides, keep includes out of here!

#pragma once

#ifndef __CMAKE_VAR_DEFS__
    #define __CMAKE_VAR_DEFS__
    #define ON    1
    #define TRUE  1
    #define OFF   0
    #define FALSE 0
#endif //ndef(__CMAKE_VAR_DEFS__)

#ifndef __COMMON_LIBS_DEFS__
    #define __COMMON_LIBS_DEFS__
    #ifndef __XSTR_DEFINES__
        #define __XSTR_DEFINES__
        #define XSTR_CONCAT(s1,s2) XSTR_CONCAT_BASE(s1,s2)
        #define XSTR_CONCAT_BASE(s1,s2) s1##s2
        #define XSTR(s) XSTR_BASE(s)
        #define XSTR_BASE(s) #s
    #endif //ndef(__XSTR_DEFINES__)
    #ifdef __cplusplus
        #ifndef D2R
            #define D2R(d) ((d)*(M_PI/180.0))
        #endif //ndef(D2R)
        #ifndef R2D
            #define R2D(r) ((r)*(180.0/M_PI))
        #endif //ndef(R2D)
        #ifndef __STDC_FORMAT_MACROS
            #define __STDC_FORMAT_MACROS
        #endif //ndef(__STDC_FORMAT_MACROS)
        #ifndef _USE_MATH_DEFINES
            #define _USE_MATH_DEFINES
        #endif //ndef(_USE_MATH_DEFINES)
        #if defined(_MSC_VER)
            #if _MSC_VER<1900 // need >= MSVC 2015 (v140) toolchain
                #error "This project requires full C++14 support (including constexpr and SFINAE)."
            #endif //_MSC_VER<1900
            #ifndef __PRETTY_FUNCTION__
                #define __PRETTY_FUNCTION__ __FUNCSIG__
            #endif //ndef(__PRETTY_FUNCTION__)
            #ifndef NOMINMAX
                #define NOMINMAX // go ahead, try using std::numeric_limits<...>::max() with the 'max' macro enabled
            #endif //ndef(NOMINMAX)
            #ifndef __func__
                #define __func__ __FUNCTION__
            #endif //ndef(__func__)
            #ifndef _SCL_SECURE_NO_WARNINGS
                #define _SCL_SECURE_NO_WARNINGS
            #endif //ndef(_SCL_SECURE_NO_WARNINGS)
            #ifndef _CRT_SECURE_NO_WARNINGS
                #define _CRT_SECURE_NO_WARNINGS
            #endif //ndef(_CRT_SECURE_NO_WARNINGS)
            #ifndef MAY_ALIAS
                #define MAY_ALIAS
            #endif //MAY_ALIAS
        #else //ndef(_MSC_VER)
            #if __cplusplus<201402L
                #error "This project requires full C++14 support (including constexpr and SFINAE)."
            #endif //__cplusplus<201402L
            #if (defined(__GNUC__) || defined(__clang__))
                #ifndef MAY_ALIAS
                    #define MAY_ALIAS __attribute__((__may_alias__))
                #endif //MAY_ALIAS
            #endif //(defined(__GNUC__) || defined(__clang__))
        #endif //ndef(_MSC_VER)
        #ifndef TIMER_DEFS
            #define TIMER_DEFS
            #define TIMER_TIC(x) int64 XSTR_CONCAT(__nCPUTimerTick_,x) = cv::getTickCount()
            #define TIMER_TOC(x) int64 XSTR_CONCAT(__nCPUTimerVal_,x) = cv::getTickCount()-XSTR_CONCAT(__nCPUTimerTick_,x)
            #define TIMER_ELAPSED_MS(x) (double(XSTR_CONCAT(__nCPUTimerVal_,x))/(cv::getTickFrequency()/1000))
        #endif //ndef(TIMER_DEFS)
    #endif //def(__cplusplus)
#endif //ndef(__COMMON_LIBS_DEFS__)

#ifndef __LV_UTILS_DEFS__
    #define __LV_UTILS_DEFS__
    #ifndef __LV_VERSION_DEFS__
        #define __LV_VERSION_DEFS__
        #define LITIV_VERSION             @LITIV_VERSION@
        #define LITIV_VERSION_STR         XSTR(LITIV_VERSION)
        #define LITIV_VERSION_MAJOR       @LITIV_VERSION_MAJOR@
        #define LITIV_VERSION_MINOR       @LITIV_VERSION_MINOR@
        #define LITIV_VERSION_PATCH       @LITIV_VERSION_PATCH@
        #define LITIV_VERSION_SHA1        "@GIT_SHA1@"
    #endif //ndef(__LV_VERSION_DEFS__)
    #ifdef __cplusplus
        #define lvStdError(errtype) throw std::errtype()
        #define lvStdError_(errtype,msg) throw std::errtype(msg)
        #define lvStdError__(errtype,msg,...) throw std::errtype(lv::putf(msg,__VA_ARGS__))
        #define lvError(msg) throw lv::Exception(std::string("[lvError: ")+(msg)+"]",__PRETTY_FUNCTION__,__FILE__,__LINE__)
        #define lvError_(msg,...) throw lv::Exception(std::string("[lvError: ")+(msg)+"]",__PRETTY_FUNCTION__,__FILE__,__LINE__,__VA_ARGS__)
        #define lvAssert(expr) do {if(!!(expr)); else throw lv::Exception(std::string("[lvAssertError] ("#expr")"),__PRETTY_FUNCTION__,__FILE__,__LINE__);} while(false)
        #define lvAssert_(expr,msg) do {if(!!(expr)); else throw lv::Exception(std::string("[lvAssertError: ")+(msg)+"] ("#expr")",__PRETTY_FUNCTION__,__FILE__,__LINE__);} while(false)
        #define lvAssert__(expr,msg,...) do {if(!!(expr)); else throw lv::Exception(std::string("[lvAssertError: ")+(msg)+"] ("#expr")",__PRETTY_FUNCTION__,__FILE__,__LINE__,__VA_ARGS__);} while(false)
        #define lvLog(level,msg) (lv::ostream_guard<std::ostream>(std::cout,level) << (msg) << '\n')
        #define lvLog_(level,msg,...) (lv::ostream_guard<std::ostream>(std::cout,level) << lv::putf(msg,__VA_ARGS__) << '\n')
        #define lvWarn(msg) (lv::ostream_guard<std::ostream>(std::cerr) << "[lvWarn @ " << __FILE__ << "(" << __LINE__ << "):\n\t" << (msg) << "\n]\n")
        #define lvWarn_(msg,...) (lv::ostream_guard<std::ostream>(std::cerr) << "[lvWarn @ " << __FILE__ << "(" << __LINE__ << "):\n\t" << lv::putf(msg,__VA_ARGS__) << "\n]\n")
        #define lvPrint(expr) (lv::ostream_guard<std::ostream>(std::cout,1) << "[lvPrint @ " << __FILE__ << "(" << __LINE__ << "):\n\t"#expr" := " << (expr) << "\n]\n")
        #define lvCout (lv::ostream_guard<std::ostream>(std::cout))
        #define lvCout_(level) (lv::ostream_guard<std::ostream>(std::cout,level))
        #define lvCerr (lv::ostream_guard<std::ostream>(std::cerr))
        #define lvCerr_(level) (lv::ostream_guard<std::ostream>(std::cerr,level))
        #define glErrorCheck do { \
            const GLenum __errn = glGetError(); \
            if(__errn!=GL_NO_ERROR) \
                lvError_("glErrorCheck failed [code=%d, msg=%s]",(int)__errn,gluErrorString(__errn)); \
        } while(false)
    #endif //def(__cplusplus)
    #ifdef _DEBUG
        #ifdef LITIV_BUILD
            #ifndef LITIV_DEBUG
                #error "Missing compiler definition 'LITIV_DEBUG'."
            #elif !LITIV_DEBUG
                #error "Current build config mismatch with LITIV internal build config."
            #endif //!LITIV_DEBUG
        #else //ndef(LITIV_BUILD)
            #ifndef LITIV_DEBUG
                #define LITIV_DEBUG 1
            #elif !LITIV_DEBUG
                #error "Current build config mismatch with LITIV external build config."
            #endif //!LITIV_DEBUG
        #endif //ndef(LITIV_BUILD)
        #ifdef __cplusplus
            #define lvDbgExec(expr) do {expr;} while(false)
            #define lvDbgAssert(expr) lvAssert(expr)
            #define lvDbgAssert_(expr,msg) lvAssert_(expr,msg)
            #define lvDbgAssert__(expr,msg,...) lvAssert__(expr,msg,__VA_ARGS__)
            #define lvDbgExceptionWatch lv::UncaughtExceptionLogger XSTR_CONCAT(__logger,__LINE__)(__PRETTY_FUNCTION__,__FILE__,__LINE__)
            #define lvDbgLog(level,msg) lvLog(level,msg)
            #define lvDbgLog_(level,msg,...) lvLog_(level,msg,__VA_ARGS__)
            #define lvDbgWarn(msg) lvWarn(msg)
            #define lvDbgWarn_(msg,...) lvWarn_(msg,__VA_ARGS__)
            #define glDbgErrorCheck glErrorCheck
        #endif //def(__cplusplus)
    #else //ndef(_DEBUG)
        #ifdef LITIV_BUILD
            #ifndef LITIV_DEBUG
                #error "Missing compiler definition 'LITIV_DEBUG'."
            #elif LITIV_DEBUG
                #error "Current build config mismatch with LITIV internal build config."
            #endif //LITIV_DEBUG
        #else //ndef(LITIV_BUILD)
            #ifndef LITIV_DEBUG
                #define LITIV_DEBUG 0
            #elif LITIV_DEBUG
                #error "Current build config mismatch with LITIV external build config."
            #endif //LITIV_DEBUG
        #endif //ndef(LITIV_BUILD)
        #ifdef __cplusplus
            #define lvDbgExec(expr) ((void)0)
            #define lvDbgAssert(expr) ((void)0)
            #define lvDbgAssert_(expr,msg) ((void)0)
            #define lvDbgAssert__(expr,msg,...) ((void)0)
            #define lvDbgExceptionWatch ((void)0)
            #define lvDbgLog(level,msg) ((void)0)
            #define lvDbgLog_(level,msg,...) ((void)0)
            #define lvDbgWarn(msg) ((void)0)
            #define lvDbgWarn_(msg,...) ((void)0)
            #define glDbgErrorCheck ((void)0)
        #endif //def(__cplusplus)
    #endif //ndef(_DEBUG)
    #define lvIgnore(x) (void)(x)
    #ifndef UNUSED
        #define UNUSED(x) lvIgnore(x)
    #endif //ndef(UNUSED)
    #if defined(_MSC_VER)
        #define lvAssertHR(expr) [](HRESULT hr){if(FAILED(hr)) lvError_("HR assertion failed ("#expr" = 0x%x), %ws",hr,_com_error(hr).ErrorMessage());}(expr)
        #ifdef _DEBUG
            #define lvDbgAssertHR(expr) lvAssertHR(expr)
        #else //ndef(_DEBUG)
            #define lvDbgAssertHR(expr) ((void)0)
        #endif //ndef(_DEBUG)
    #endif //def(_MSC_VER)
#endif //ndef(__LV_UTILS_DEFS__)

#ifndef __LV_CONFIG_DEFS__
    #define __LV_CONFIG_DEFS__
    // config defs that may still change from CMake values have ifndef's
    #ifndef USE_OPENCV_MAT_CONSTR_FIX
        #define USE_OPENCV_MAT_CONSTR_FIX   @USE_OPENCV_MAT_CONSTR_FIX@
    #endif //ndef(USE_OPENCV_MAT_CONSTR_FIX)
    #ifndef USE_OPENCV_x264_TEST
        #define USE_OPENCV_x264_TEST        @USE_OPENCV_x264_TEST@
    #endif //ndef(USE_OPENCV_x264_TEST)
    #ifndef USE_SIGNEXT_SHIFT_TRICK
        #define USE_SIGNEXT_SHIFT_TRICK     @USE_SIGNEXT_SHIFT_TRICK@
    #endif //ndef(USE_SIGNEXT_SHIFT_TRICK)
    #ifndef USE_FAST_SQRT_FOR_CDIST
        #define USE_FAST_SQRT_FOR_CDIST     @USE_FAST_SQRT_FOR_CDIST@
    #endif //ndef(USE_FAST_SQRT_FOR_CDIST)
    #ifndef USE_BSDS500_BENCHMARK
        #define USE_BSDS500_BENCHMARK       @USE_BSDS500_BENCHMARK@
    #endif //ndef(USE_BSDS500_BENCHMARK)
    #ifndef USE_KINECTSDK_STANDALONE
        #define USE_KINECTSDK_STANDALONE    @USE_KINECTSDK_STANDALONE@
    #endif //ndef(USE_KINECTSDK_STANDALONE)
    #ifndef USE_CVCORE_WITH_UTILS
        #define USE_CVCORE_WITH_UTILS       @USE_CVCORE_WITH_UTILS@
    #endif //ndef(USE_CVCORE_WITH_UTILS)
    #ifndef EXTERNAL_DATA_ROOT
        #define EXTERNAL_DATA_ROOT          XSTR(@EXTERNAL_DATA_ROOT@)
    #endif //ndef(EXTERNAL_DATA_ROOT)
    #ifndef SAMPLES_DATA_ROOT
        #define SAMPLES_DATA_ROOT           XSTR(@SAMPLES_DATA_ROOT@)
    #endif //SAMPLES_DATA_ROOT
    #ifndef TEST_INPUT_DATA_ROOT
        #define TEST_INPUT_DATA_ROOT        XSTR(@TEST_INPUT_DATA_ROOT@)
    #endif //ndef(TEST_INPUT_DATA_ROOT)
    #ifndef TEST_OUTPUT_DATA_ROOT
        #define TEST_OUTPUT_DATA_ROOT       XSTR(@TEST_OUTPUT_DATA_ROOT@)
    #endif //ndef(TEST_OUTPUT_DATA_ROOT)
    #ifndef CACHE_MAX_SIZE_GB
        #define CACHE_MAX_SIZE_GB           @DATASETS_CACHE_SIZE@LLU
    #endif //ndef(CACHE_MAX_SIZE_GB)
    #ifndef DEFAULT_NB_THREADS
        #define DEFAULT_NB_THREADS          1
    #endif //ndef(DEFAULT_NB_THREADS)
    #ifndef USE_RLUTIL_ANSI_DEFINE
        #define USE_RLUTIL_ANSI_DEFINE      @USE_RLUTIL_ANSI_DEFINE@
    #endif //ndef(USE_RLUTIL_ANSI_DEFINE)
    #ifndef RLUTIL_STRING_TYPE
        #define RLUTIL_STRING_TYPE          @RLUTIL_STRING_TYPE@
    #endif //ndef(RLUTIL_STRING_TYPE)

    // config defs below cannot change from CMake values
    #define TARGET_PLATFORM_x64       @TARGET_PLATFORM_x64@
    #define LITIV_SHARED              @BUILD_SHARED_LIBS@
    #define LITIV_STATIC              (!(LITIV_SHARED))
    #define USING_LINK_TIME_OPTIM     @USE_LINK_TIME_OPTIM@
    #define USING_FAST_MATH           @USE_FAST_MATH@
    #define USING_OPENMP              @USE_OPENMP@
    #define USING_WORLD_SOURCE_GLOB   @USE_WORLD_SOURCE_GLOB@
    #define USING_SOSPD               @USE_SOSPD@
    #define USING_OFDIS               @USE_OFDIS@

    #if (defined(_MSC_VER) || defined(_WIN32) || defined(WIN32) || defined(__CYGWIN__))
        #ifdef _MSC_VER
            #define USE_VERSION_TAGS  @USE_VERSION_TAGS@
        #endif //def(_MSC_VER)
        #if (defined(LV_EXPORT_API) && defined(LV_IMPORT_API))
            #error "API import/export config error"
        #elif defined(LV_EXPORT_API)
            #if (defined(__GNUC__) || defined(__clang__))
                #define LV_PUBLIC __attribute__ ((dllexport))
            #elif defined(_MSC_VER)
                #define LV_PUBLIC __declspec(dllexport)
            #else // unknown platform?
                #define LV_PUBLIC
            #endif / unknown platform?
        #elif defined(LV_IMPORT_API)
            #if (defined(__GNUC__) || defined(__clang__))
                #define LV_PUBLIC __attribute__ ((dllimport))
            #elif defined(_MSC_VER)
                #define LV_PUBLIC __declspec(dllimport)
            #else // unknown platform?
                #define LV_PUBLIC
            #endif / unknown platform?
        #else //(ndef(LV_EXPORT_API) && ndef(LV_IMPORT_API))
            #define LV_PUBLIC
        #endif //(ndef(LV_EXPORT_API) && ndef(LV_IMPORT_API))
        #define LV_LOCAL
    #else // if not on windows
        #if ((defined(__GNUC__) && (__GNUC__>=4)) || defined(__clang__))
            #if (defined(LV_EXPORT_API) || defined(LV_IMPORT_API))
                #define LV_PUBLIC __attribute__ ((visibility("default")))
                #define LV_LOCAL  __attribute__ ((visibility("hidden")))
            #else //!(defined(LV_EXPORT_API) || defined(LV_IMPORT_API))
                #define LV_PUBLIC
                #define LV_LOCAL
            #endif //!(defined(LV_EXPORT_API) || defined(LV_IMPORT_API))
        #else // if not clang and not gcc, or gcc not compat version
            #define LV_PUBLIC
            #define LV_LOCAL
        #endif // if not clang and not gcc, or gcc not compat version
    #endif // if not on windows
    #if DEFAULT_NB_THREADS<1
        #error "Bad default number of threads specified."
    #endif //DEFAULT_NB_THREADS<1

    #define HAVE_GLSL                 @USE_GLSL@
    #if HAVE_GLSL
        #define TARGET_GL_VER_MAJOR   @TARGET_GL_VER_MAJOR@
        #define TARGET_GL_VER_MINOR   @TARGET_GL_VER_MINOR@
        #define GLEW_EXPERIMENTAL     @USE_GLEW_EXPERIMENTAL@
        #define HAVE_GLFW             @USE_GLFW@
        #define HAVE_FREEGLUT         @USE_FREEGLUT@
        #define USE_VPTZ_STANDALONE   @USE_VPTZ_STANDALONE@
    #endif //HAVE_GLSL

    #define HAVE_CUDA                      @USE_CUDA@
    #if HAVE_CUDA
        #define LITIV_CUDA_VERSION         XSTR(@CUDA_VERSION@)
        #define LITIV_CUDA_MIN_COMPUTE_CAP cv::cuda::FEATURE_SET_COMPUTE_35
        #define CUDA_64_BIT_DEVICE_CODE    @CUDA_64_BIT_DEVICE_CODE@
        #define CUDA_PROPAGATE_HOST_FLAGS  @CUDA_PROPAGATE_HOST_FLAGS@
    #endif //HAVE_CUDA

    #define HAVE_OPENCL               @USE_OPENCL@
    #if HAVE_OPENCL
        // ...
    #endif //HAVE_OPENCL

    #define HAVE_BOOST                @USE_BOOST@
    #if HAVE_BOOST
        #define HAVE_BOOST_CHRONO     @Boost_CHRONO_FOUND@
        #define HAVE_BOOST_DATETIME   @Boost_DATE_TIME_FOUND@
        #define HAVE_BOOST_SYSTEM     @Boost_SYSTEM_FOUND@
        #define HAVE_BOOST_FILESYSTEM @Boost_FILESYSTEM_FOUND@
        #define HAVE_BOOST_PROGOPTS   @Boost_PROGRAM_OPTIONS_FOUND@
        #define HAVE_BOOST_REGEX      @Boost_REGEX_FOUND@
        #define HAVE_BOOST_SERIALIZ   @Boost_SERIALIZATION_FOUND@
    #endif //HAVE_BOOST

    #define HAVE_OPENGM               @USE_OPENGM@
    #if HAVE_OPENGM
        #define HAVE_OPENGM_CPLEX          @USE_OPENGM_WITH_CPLEX@
        #define HAVE_OPENGM_GUROBI         @USE_OPENGM_WITH_GUROBI@
        #define HAVE_OPENGM_HDF5           @USE_OPENGM_WITH_HDF5@
        #define HAVE_OPENGM_EXTLIB         @USE_OPENGM_WITH_EXTLIB@
        #define HAVE_OPENGM_EXTLIB_FASTPD  @HAVE_OPENGM_EXTLIB_FASTPD@
        #define HAVE_OPENGM_EXTLIB_QPBO    @HAVE_OPENGM_EXTLIB_QPBO@
    #endif //HAVE_OPENGM

    #define HAVE_KINECTSDK            @USE_KINECTSDK@

    #ifndef HAVE_MMX
        #define HAVE_MMX              @USE_MMX@
    #endif //ndef(HAVE_MMX)
    #ifndef HAVE_SSE
        #define HAVE_SSE              @USE_SSE@
    #endif //ndef(HAVE_SSE)
    #ifndef HAVE_SSE2
        #define HAVE_SSE2             @USE_SSE2@
    #endif //ndef(HAVE_SSE2)
    #ifndef HAVE_SSE3
        #define HAVE_SSE3             @USE_SSE3@
    #endif //ndef(HAVE_SSE3)
    #ifndef HAVE_SSSE3
        #define HAVE_SSSE3            @USE_SSSE3@
    #endif //ndef(HAVE_SSSE3)
    #ifndef HAVE_SSE4_1
        #define HAVE_SSE4_1           @USE_SSE4_1@
    #endif //ndef(HAVE_SSE4_1)
    #ifndef HAVE_SSE4_2
        #define HAVE_SSE4_2           @USE_SSE4_2@
    #endif //ndef(HAVE_SSE4_2)
    #ifndef HAVE_POPCNT
        #define HAVE_POPCNT           @USE_POPCNT@
    #endif //ndef(HAVE_POPCNT)
    #ifndef HAVE_AVX
        #define HAVE_AVX              @USE_AVX@
    #endif //ndef(HAVE_AVX)
    #ifndef HAVE_AVX2
        #define HAVE_AVX2             @USE_AVX2@
    #endif //ndef(HAVE_AVX2)

    #ifndef HAVE_STL_ALIGNED_ALLOC
        #define HAVE_STL_ALIGNED_ALLOC        @USE_STL_ALIGNED_ALLOC@
    #endif //ndef(HAVE_STL_ALIGNED_ALLOC)
    #ifndef HAVE_POSIX_ALIGNED_ALLOC
        #define HAVE_POSIX_ALIGNED_ALLOC      @USE_POSIX_ALIGNED_ALLOC@
    #endif //ndef(HAVE_POSIX_ALIGNED_ALLOC)
#endif //ndef(__LV_CONFIG_DEFS__)
